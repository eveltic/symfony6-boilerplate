security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # api:
        #     pattern: ^/api/
        #     custom_authenticators:
        #         - App\Security\ApiTokenAuthenticator
        main:
            two_factor:
                auth_form_path: 2fa_login    # The route name you have used in the routes.yaml
                check_path: 2fa_login_check  # The route name you have used in the routes.yaml
                post_only: true              # If the check_path should accept the code only as a POST request
                trusted_parameter_name: _trusted  # Name of the parameter for the trusted device option
                enable_csrf: true
            custom_authenticators:
                - App\Security\LoginFormAuthenticator
            user_checker: App\Security\UserChecker
            login_link:
                check_route: app_frontend_security_login_link_check
                signature_properties: ['id']
                lifetime: 300
                check_post_only: true
                max_uses: 1
                login_path: app_frontend_security_login
            lazy: true
            provider: app_user_provider
            form_login:
                enable_csrf: true
                login_path: app_frontend_security_login
                check_path: app_frontend_security_login
                failure_path: app_frontend_security_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
            switch_user: true
            logout:
                path: app_frontend_security_logout
                target: app_frontend_security_login
#                invalidate_session: false
            remember_me:
                secret: '%env(APP_SECRET)%'
                lifetime: 2592000 # 1 month in seconds
                path: /
                domain: ~
                secure: true
    role_hierarchy:
        ROLE_ROOT: [ROLE_ADMIN]
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/backend, roles: ROLE_ADMIN }
        - { path: ^/security/request, roles: PUBLIC_ACCESS , requires_channel: https }
        - { path: ^/security/check, roles: PUBLIC_ACCESS , requires_channel: https }
        - { path: ^/security/reset, roles: PUBLIC_ACCESS , requires_channel: https }
        - { path: ^/security/register, roles: PUBLIC_ACCESS , requires_channel: https }
        - { path: ^/security/verify, roles: PUBLIC_ACCESS , requires_channel: https }
        - { path: ^/security/login, roles: PUBLIC_ACCESS , requires_channel: https }
        - { path: ^/security/logout, roles: PUBLIC_ACCESS , requires_channel: https }
        - { path: ^/2fa, role: IS_AUTHENTICATED_2FA_IN_PROGRESS } # This ensures that the form can only be accessed when two-factor authentication is in progress.

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
